[{"name": "app.py", "content": "import random\nfrom datetime import datetime\nfrom collections import deque\nfrom shiny import reactive, render, App, ui \nfrom shiny.express import ui\nfrom shinywidgets import render_plotly \nimport pandas as pd\nimport plotly.express as px\nfrom scipy import stats\nfrom faicons import icon_svg\nfrom htmltools import HTML\n\n# Constants\nUPDATE_INTERVAL_SECS: float = .5\nDEQUE_SIZE: int = 5\n\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n@reactive.calc()\ndef reactive_calc_combined():\n    # Data generation logic\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n    temp = round(random.uniform(-19, -14), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n\n    # Update deque\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Return the updated data\n    deque_snapshot = reactive_value_wrapper.get()\n    df = pd.DataFrame(deque_snapshot)\n    latest = new_dictionary_entry\n    return deque_snapshot, df, latest\n  \n# Shiny UI\nui.page_opts(\n    title=\"PyShiny Express: Live Data\",\n    head_content=\"\"\"\n    <script>\n    document.addEventListener('shiny:value', function(event) {\n        event.preventDefault();\n    });\n    </script>\n    \"\"\"\n)\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n    ui.p(\"A demonstration of real-time temperature readings.\", class_=\"text-center\")\n    ui.hr()\n    ui.h4(\"Links:\")  # Increased heading level for better visibility\n    ui.a(\"GitHub Source\", href=\"https://github.com/pojetta/cintel-05-cintel-\", target=\"_blank\")\n    ui.a(\"GitHub App\", href=\"https://pojetta.github.io/cintel-05-cintel/\", target=\"_blank\")\n    ui.a(\"PyShiny\", href=\"https://shiny.com\", target=\"_blank\")\n\nwith ui.layout_columns(col_widths=(8,4)):\n    with ui.value_box(theme=ui.value_box_theme(fg=\"#0B538E\"), class_=\"text-center\"):\n        ui.p(\"\")\n        ui.p(\n            ui.span(icon_svg(\"heart\"), style=\"color:red;\"),\n            \" We're cozy here in KC \",\n            ui.span(icon_svg(\"heart\"), style=\"color:red;\"),\n            style=\"color:#0B538E;\"\n        )\n        ui.p(\"\")\n        \n    with ui.value_box(theme=ui.value_box_theme(fg=\"#0B538E\"),class_=\"text-center\"): \n\n        @render.text\n        def display_date():\n            deque_snapshot, df, latest = reactive_calc_combined()\n            timestamp = datetime.strptime(latest['timestamp'], \"%Y-%m-%d %H:%M:%S\")\n            date = timestamp.strftime(\"%m-%d-%Y\")\n            return date\n\n        @render.text\n        def display_time():\n            deque_snapshot, df, latest = reactive_calc_combined()\n            timestamp = datetime.strptime(latest['timestamp'], \"%Y-%m-%d %H:%M:%S\")\n            time = timestamp.strftime(\"%I:%M:%S %p\")\n            return time\n        \n        ui.h6(\"CST\")\n\nwith ui.layout_columns(class_=\"text-center\"):\n    with ui.card():\n        ui.h3(\"Meanwhile, in Antarctica...\", class_=\"text-center\")\n        \n        ui.p(\"(which is approximately 6 to 18 hours ahead of us)\", class_=\"text-center\")\n        \n        with ui.layout_column_wrap(width=1 / 2):\n            with ui.value_box(\n                showcase=icon_svg(\"snowflake\"),\n                theme=ui.value_box_theme(fg=\"#e6f2fd\", bg=\"#0B538E\"),\n                showcase_layout=\"top right\"):\n\n\n                \"Current Temperature\"\n\n                @render.text\n                def display_temp_c():\n                    deque_snapshot, df, latest = reactive_calc_combined()\n                    return f\"{latest['temp']} C\"\n\n                ui.h6(\"In Celsius\", class_=\"text-center\")\n            \n            with ui.value_box(\n                showcase=icon_svg(\"snowflake\"),\n                theme=ui.value_box_theme(fg=\"#0B538E\", bg=\"#f01414\"),\n                showcase_layout=\"top right\"):\n\n                \"Current Temperature\"\n\n                @render.text\n                def display_temp_f():\n                    deque_snapshot, df, latest = reactive_calc_combined()\n                    # Convert temperature from Celsius to Fahrenheit\n                    temp_celsius = latest['temp']\n                    temp_fahrenheit = (temp_celsius * 9/5) + 32\n                    return f\"{temp_fahrenheit:.1f} \u00b0F\"\n                \n                ui.h6(\"In America\", class_=\"text-center\")\n\n        ui.h2(\"It's cold as F*CK!\")  \n\nui.hr()\nui.h5(\"IN OTHER NEWS: Reports flooding in; claim something interesting actually happening in Antarctica.\", class_=\"text-center\") \n\nwith ui.card(full_screen = True, min_height=\"40%\", style=\"background-color: #e6f2fd;\"):\n    ui.card_header(\"Our livestream is showing some erratic behavior, scroll down for more.\", style=\"font-family: monospace; font-weight: 300; font-size: 16px; background-color: white; color: #0B538E;\")\n \n    @render.data_frame\n    def display_df():\n        \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n        deque_snapshot, df, latest = reactive_calc_combined()\n\n        # Rename columns and reorder them\n        df = df.rename(columns={\"timestamp\": \"Time\", \"temp\": \"Temperature (\u00b0C)\"})\n        df = df[[\"Time\", \"Temperature (\u00b0C)\"]]  # Reorder columns\n\n        pd.set_option('display.width', None)       \n        return render.DataGrid( df,width=\"100%\")  \n\nwith ui.card():\n    ui.card_header(\n        \"CURRENTlY: SPASMODIC FLUCTUATIONS DEFY ALL LOGIC\",\n        style=\"font-family: monospace;font-size: 18px; color: #f01414;\"\n    ) \n\n    with ui.div(style=\"overflow: hidden;\"):\n        @render_plotly\n        def display_plot():\n            deque_snapshot, df, latest = reactive_calc_combined()\n\n            if df.empty:\n                return ui.p(\"No data available for plotting.\")  # UI element for message\n\n            # Convert timestamp to datetime\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n            # Scatter plot with regression line\n            fig = px.scatter(\n                df,\n                x=\"timestamp\",\n                y=\"temp\",\n                title=\"Regression Line on Verge of Meltdown\",\n                labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n                color_discrete_sequence=[\"white\"],\n            )\n\n            # Linear regression\n            x_vals = (df[\"timestamp\"] - df[\"timestamp\"].min()).dt.total_seconds()\n            y_vals = df[\"temp\"]\n            slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n            df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n            # Add regression line\n            fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines')\n\n            # Update the title properties: center and make it larger\n            fig.update_layout(\n                title={\n                    'text': \"Regression line on verge of meltdown!\",\n                    'font': {'size': 16, 'color': 'black'},\n                    'x': 0.5,\n                    'xanchor': 'center'\n                },\n                xaxis_title=\"Time\",\n                yaxis_title=\"Temperature (\u00b0C)\",\n                xaxis=dict(tickfont=dict(size=14, color='black')),\n                yaxis=dict(tickfont=dict(size=14, color='black')),\n                paper_bgcolor=\"#e6f2fd\",  # Background color for the entire figure\n                plot_bgcolor=\"#0B538E\",    # Background color for the plot area\n                transition_duration=0\n            )\n            return fig\n        \n    ui.HTML(\n        '''\n        <div style=\"text-align: center;\">\n            <i class=\"fa fa-facebook\" aria-hidden=\"true\" style=\"margin: 0 10px; font-size: 36px; color: #4267B2;\"></i>\n            <i class=\"fa fa-instagram\" aria-hidden=\"true\" style=\"margin: 0 10px; font-size: 36px; color: #E4405F;\"></i>\n            <i class=\"fa fa-twitter\" aria-hidden=\"true\" style=\"margin: 0 10px; font-size: 36px; color: #1DA1F2;\"></i>\n            <i class=\"fa fa-youtube\" aria-hidden=\"true\" style=\"margin: 0 10px; font-size: 36px; color: #FF0000;\"></i>\n            <i class=\"fa fa-github\" aria-hidden=\"true\" style=\"margin: 0 10px; font-size: 36px; color: #000000;\"></i>\n        </div>\n        '''\n    )    \n\n\n\n\n\n\n\n\n", "type": "text"}]